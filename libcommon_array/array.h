/***********************************************************************************
 * @ file    : array.h
 * @ author  : yang yang
 * @ version : 0.9
 * @ date    : 2016.08.15
 * @ brief   : 基于动态数组的队列以及栈式结构的实现. 其所管理的数据内存
 *             由外部分配以及释放，array本身不做任何处理。
 *             目前动态数组只会enlarge, 暂时没有设置shrink功能
 * @ example :
 *             array_t arr = create_array(4, 8);
 *             enqueue_array(arr, data1);
 *             enqueue_array(arr, data2);
 *             ...
 * @Copyright (c) 2016  chuangmi inc.
************************************************************************************/

#ifndef __ARRAY_H__
#define __ARRAY_H__

#ifdef __cplusplus
extern "C" {
#endif

#include "defs.h"

#define QUEUE_ERR_CANNOT_SHRINK     -10002

typedef struct _array_t* array_t;

//-------------------------------------------------------------------------------------
// 创建动态数组. 因为采用2分法进行数组大小的动态扩展，容量最好是2的整数次方
//
// @initCapacity:   动态数组的初始长度
// @maxCapacity:    动态数组的最大长度
// @return:         创建的动态数组
//-------------------------------------------------------------------------------------
array_t create_array(int initCapacity, int maxCapacity);

//-------------------------------------------------------------------------------------
// 释放动态数组. 需要注意的是array只管理指针，并不分配和回收内存空间。
// 因此在释放array时，如果需要释放内部元素的内存时，调用者需要遍历array然后手工
// 释放对象的内存，例如利用pop弹出出所有的元素
// @arr:    动态数组
//-------------------------------------------------------------------------------------
void release_array(array_t arr);

//-------------------------------------------------------------------------------------
// 读取动态数组的大小
// @return: 大于0, 数组的大小。小于0: 错误编码
//-------------------------------------------------------------------------------------
int array_get_size(array_t arr);

//-------------------------------------------------------------------------------------
// 读取动态数组的当前分配的空间大小
// @return: 大于0, 数组的容量。小于0: 错误编码
//-------------------------------------------------------------------------------------
int array_get_capacity(array_t arr);

//-------------------------------------------------------------------------------------
// 读取动态数组的最大可用空间大小
// @return: 大于0, 数组的最大容量。小于0: 错误编码
//-------------------------------------------------------------------------------------
int array_get_max_capacity(array_t arr);

//-------------------------------------------------------------------------------------
// 读取动态数组的最小空间
// return: 大于0, 数组的最小大小。小于0: 错误编码
//-------------------------------------------------------------------------------------
int array_get_min_capacity(array_t arr);

//-------------------------------------------------------------------------------------
// 获取动态数组中指定下标的元素
// @arr:    需要操作的动态数组
// @index:  下标
// @return: 根据index获取的元素.如果index不正确返回NULL
//-------------------------------------------------------------------------------------
void *array_get_value(array_t arr, int index);

//-------------------------------------------------------------------------------------
// 更新动态数组中指定下标的元素
// @arr:    需要操作的动态数组
// @index:  数组下标
// @data:   数据
// @return: 0: 成功，其他错误编码
//-------------------------------------------------------------------------------------
int array_update_value(array_t arr, int index, void* data);

//-------------------------------------------------------------------------------------
// 查找指定的array
// comparer: 指向比较函数的指针
// startIdx: 查找的起始位置
// 返回值:   返回检索到的元素下标, 小于0则没有查到
//-------------------------------------------------------------------------------------
int array_search(array_t arr, int startIdx, element_matcher comparer, void *searchData);

//-------------------------------------------------------------------------------------
// 删除array中指定下标的元素, 并返回对应的值. 需要注意的是, 删除后会移动元素,填补空缺
// @return: 如果指定index无效, 则返回NULL
//-------------------------------------------------------------------------------------
void *array_remove(array_t arr, int index);

//-------------------------------------------------------------------------------------
// 删除array指定条件的元素, 并返回对应的值. 需要注意的是, 删除后会移动元素,填补空缺
// @return: 如果没有找到指定元素, 则返回NULL
//-------------------------------------------------------------------------------------
void *array_search_and_remove(array_t arr, int startIdx, element_matcher comparer, 
    void *searchData);

//-------------------------------------------------------------------------------------
// 删除array中指定下标的元素, 并返回对应的值. 同时把最后一个元素填补到删除的空缺位置
// @return: 如果指定index无效, 则返回NULL
//-------------------------------------------------------------------------------------
void *array_fast_remove(array_t arr, int index);

//-------------------------------------------------------------------------------------
// 根据条件删除array中的元素, 并返回对应的值. 同时把最后一个元素填补到删除的空缺位置
// @return: 如果没有找到指定元素, 则返回NULL
//-------------------------------------------------------------------------------------
void *array_fast_search_and_remove(array_t arr, int startIdx, element_matcher comparer, 
    void *searchData);

//-------------------------------------------------------------------------------------
// 利用动态数组进行队列操作
// @arr:    需要操作的动态数组
// @data:   需要入队的数据
// @return: 0成功，其他错误编码
//-------------------------------------------------------------------------------------
int array_enqueue(array_t arr, void *data);

//-------------------------------------------------------------------------------------
// 利用动态数组进行队列操作
// @arr:    需要操作的动态数组
// @return: 出队的数据. NULL队列中无数据
//-------------------------------------------------------------------------------------
void* array_dequeue(array_t arr);

//-------------------------------------------------------------------------------------
// 利用动态数组进行队列操作
// @arr:    需要操作的动态数组
// @return: 队头的数据。NULL表示队列中无数据
//-------------------------------------------------------------------------------------
void* array_peek_queue(array_t arr);

//-------------------------------------------------------------------------------------
// 利用动态数组进行栈操作
// @arr:    需要操作的动态数组
// @data:   需要入栈的数据
// @return: 0成功，其他错误编码
//-------------------------------------------------------------------------------------
int array_push(array_t arr, void *data);

//-------------------------------------------------------------------------------------
// 利用动态数组进行栈操作
// @arr:    需要操作的动态数组
// @return: 出栈的数据. NULL队列中无数据
//-------------------------------------------------------------------------------------
void *array_pop(array_t arr);

//-------------------------------------------------------------------------------------
// 利用动态数组进行栈操作
// @arr:    需要操作的动态数组
// @return: 栈顶的数据。NULL表示队列中无数据
//-------------------------------------------------------------------------------------
void *array_peek_stack(array_t arr);

#ifdef __cplusplus
}
#endif

#endif // __ARRAY_H__
